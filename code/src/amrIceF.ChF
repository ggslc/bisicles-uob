#include "CONSTANTS.H"
#include "IceConstants.H"

c ----------------------------------------------------
c  compute undivided difference of phi -- puts max(grad(phi))
c  over all components into dq
c ----------------------------------------------------
      subroutine UNDIVIDEDGRAD(CHF_FRA1[dq],
     &                         CHF_CONST_FRA[q],
     &                         CHF_BOX[dInterior],
     &                         CHF_BOX[loedge],
     &                         CHF_BOX[hiedge],
     &                         CHF_CONST_INT[idir],
     &                         CHF_CONST_INT[haslo],
     &                         CHF_CONST_INT[hashi])

      integer ldir, CHF_DDECL[i;j;k]
      integer CHF_DDECL[ioff;joff;koff]
      integer n, ncomp

      ncomp = CHF_NCOMP[q]

      CHF_DTERM[
      ioff = CHF_ID(0,idir);
      joff = CHF_ID(1,idir);
      koff = CHF_ID(2,idir)]
      
      
c     Perform first difference calculation in the interior.

      CHF_MULTIDO[dInterior;i;j;k]

c     Find maximum gradient -- refine where max>cutoff      
      dq(CHF_IX[i;j;k]) = 0
      do n = 0, ncomp-1
       dq(CHF_IX[i;j;k]) = max( abs(dq(CHF_IX[i;j;k])), 
     &       half*abs( q(CHF_IX[i+ioff;j+joff;k+koff],n)
     &         - q(CHF_IX[i-ioff;j-joff;k-koff],n) ))
      enddo

      CHF_ENDDO

c     Perform calculation on the cells adjacent to the domain boundary in
c     sweep direction, if required.

      if (haslo .eq. 1) then

         CHF_MULTIDO[loedge;i;j;k]

         dq(CHF_IX[i;j;k])=0
         do n = 0, ncomp-1
           dq(CHF_IX[i;j;k]) = max( abs(dq(CHF_IX[i;j;k])),
     &        abs( q(CHF_IX[i+ioff;j+joff;k+koff], n) - q(CHF_IX[i;j;k], n)))
         enddo

         CHF_ENDDO
      endif

      if (hashi .eq. 1) then
         CHF_MULTIDO[hiedge;i;j;k]

         dq(CHF_IX[i;j;k])=0
         do n = 0, ncomp-1
           dq(CHF_IX[i;j;k]) = max( abs(dq(CHF_IX[i;j;k])), 
     &          abs(q(CHF_IX[i;j;k], n) -
     &          q(CHF_IX[i-ioff;j-joff;k-koff], n)))
         enddo
         CHF_ENDDO

      endif
      return
      end      
      
c---------------------------------------------------
c set fab = fabval where mask == maskval
c---------------------------------------------------

      subroutine SETONMASK(CHF_FRA1[fab],
     &     CHF_CONST_FIA1[mask], 
     &     CHF_CONST_INT[maskval],
     &     CHF_CONST_REAL[fabval],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]

      CHF_AUTOMULTIDO[box; i]
      if (mask(CHF_AUTOIX[i]).eq.maskval) then
         fab(CHF_AUTOIX[i]) = fabval
      end if
      CHF_ENDDO
      
      return
      end
c----------------------------------------------------
c sweep in all four directions dir \in {east,west,south,north)
c settting fab(i) = max(fab(i),fab(i-e[dir])) wherever
c conn(i) > tol and conn(i-e[dir]) > tol. fab and conn must
c be at least one cell bigger than box
c----------------------------------------------------

      subroutine sweepconnected2di(CHF_FIA1[fab],
     &     CHF_CONST_FRA1[conn], 
     &     CHF_CONST_REAL[tol],
     &     CHF_BOX[box])

      integer i,j

      !sweeps along 0 directions
#if (CH_SPACEDIM > 1)
      do j = CHF_LBOUND[box;1],CHF_UBOUND[box;1]
#endif
         do i = CHF_LBOUND[box;0],CHF_UBOUND[box;0],1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i-1;j;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i-1;j;k]) ) 
            end if
         end do

         do i = CHF_UBOUND[box;0],CHF_LBOUND[box;0],-1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i+1;j;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i+1;j;k]) )
            end if
         end do
#if (CH_SPACEDIM > 1)
      end do

      !sweeps along 1 direction
      do i = CHF_LBOUND[box;0],CHF_UBOUND[box;0]

         do j = CHF_LBOUND[box;1],CHF_UBOUND[box;1],1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i;j-1;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i;j-1;k])  )
            end if
         end do

         do j = CHF_UBOUND[box;1],CHF_LBOUND[box;1],-1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i;j+1;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i;j+1;k])  )
            end if
         end do

      end do
#endif
      return 

      end


c----------------------------------------------------
c sweep in all four directions dir \in {east,west,south,north)
c settting fab(i) = max(fab(i),fab(i-e[dir])) wherever
c conn(i) > tol and conn(i-e[dir]) > tol. fab and conn must
c be at least one cell bigger than box
c----------------------------------------------------

      subroutine sweepconnected2d(CHF_FRA1[fab],
     &     CHF_CONST_FRA1[conn], 
     &     CHF_CONST_REAL[tol],
     &     CHF_BOX[box])

      integer i,j

      !sweeps along 0 directions
#if (CH_SPACEDIM > 1)
      do j = CHF_LBOUND[box;1],CHF_UBOUND[box;1]
#endif
         do i = CHF_LBOUND[box;0],CHF_UBOUND[box;0],1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i-1;j;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i-1;j;k]) ) 
            end if
         end do

         do i = CHF_UBOUND[box;0],CHF_LBOUND[box;0],-1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i+1;j;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i+1;j;k]) )
            end if
         end do
#if (CH_SPACEDIM > 1)
      end do

      !sweeps along 1 direction
      do i = CHF_LBOUND[box;0],CHF_UBOUND[box;0]

         do j = CHF_LBOUND[box;1],CHF_UBOUND[box;1],1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i;j-1;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i;j-1;k])  )
            end if
         end do

         do j = CHF_UBOUND[box;1],CHF_LBOUND[box;1],-1
            if ((conn(CHF_IX[i;j;k]).gt.tol).and.(conn(CHF_IX[i;j+1;k]).gt.tol)) then
               fab(CHF_IX[i;j;k]) = max(fab(CHF_IX[i;j;k]),fab(CHF_IX[i;j+1;k])  )
            end if
         end do

      end do
#endif
      return 

      end


c ----------------------------------------------------
c sets beta^2 to zero if ice is floating
c ----------------------------------------------------
      subroutine SETFLOATINGBETA(CHF_FRA1[beta],
     &     CHF_CONST_FIA1[floatingMask],
     &     CHF_REAL[ice_free_beta],
     &     CHF_BOX[gridBox])

      integer CHF_AUTODECL[i]
    
c     original behaviour
      CHF_AUTOMULTIDO[gridBox; i]
      if (floatingMask(CHF_AUTOIX[i]).eq.FLOATINGMASKVAL) then
c     floating ice
         beta(CHF_AUTOIX[i]) = zero
      else if (floatingMask(CHF_AUTOIX[i]).eq.OPENSEAMASKVAL) then
c     open sea : set beta >- ice_free_beta (and hope that rhs, mu = 0)
         beta(CHF_AUTOIX[i]) = max(ice_free_beta,beta(CHF_AUTOIX[i]))
      else if (floatingMask(CHF_AUTOIX[i]).eq.OPENLANDMASKVAL) then
c     open land : set beta = 100.0 (and hope that rhs, mu = 0)
         beta(CHF_AUTOIX[i]) = max(ice_free_beta,beta(CHF_AUTOIX[i]))
      else
         beta(CHF_AUTOIX[i]) = max(1.0d-10,beta(CHF_AUTOIX[i]))
      end if
      CHF_ENDDO
       
      return
      end

c --------------------------------------------------
c set surface elevation to topography on open land and to
c sea level on open sea regions
c --------------------------------------------------

      subroutine SETOPENSURFACE(CHF_FRA1[surf],
     &     CHF_CONST_FIA1[mask],
     &     CHF_CONST_FRA1[topg],  
     &     CHF_CONST_REAL[seaLevel],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      CHF_AUTOMULTIDO[box ; i]
      
      if ( mask(CHF_AUTOIX[i]).eq. OPENSEAMASKVAL ) then
         surf(CHF_AUTOIX[i]) = seaLevel
      else if( mask(CHF_AUTOIX[i]).eq. OPENLANDMASKVAL ) then
         surf(CHF_AUTOIX[i]) = topg(CHF_AUTOIX[i])
      end if

      CHF_ENDDO
      return 
      end
 
      
c------------------------------------------------------
c     set fab data to val in ice-free regions
c-----------------------------------------------------
      subroutine seticefreeval(CHF_FRA1[fab],
     &     CHF_CONST_FIA1[mask],
     &     CHF_CONST_REAL[val],
     &     CHF_BOX[cellBox])

      integer CHF_AUTODECL[i] 
      integer maskc
      
      CHF_AUTOMULTIDO[cellBox ; i]
      maskc = mask(CHF_AUTOIX[i])
      if ((maskc.eq.OPENSEAMASKVAL).or.(maskc.eq.OPENLANDMASKVAL)) then
         fab(CHF_AUTOIX[i]) = val
      end if
      CHF_ENDDO

      return
      end

     
c------------------------------------------------------
c set viscous tensor normal components at faces along the 
c calving front to
c
c vt_kk(i+1/2,j) = vt_kk(i-1/2,j) + factor * H(i,j) * (s(i,j) - s(i-1,j))
c
c factor should be = rhoo*grav*(1-rhoi/rhoo) * dx
c------------------------------------------------------     
      subroutine setfrontfacevt(CHF_FRA1[facevt],
     &     CHF_CONST_FRA1[thck],
     &     CHF_CONST_FRA1[usrf],
     &     CHF_CONST_FIA1[mask],
     &     CHF_CONST_INT[k],
     &     CHF_CONST_REAL[factor],
     &     CHF_BOX[cellBox])

      
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      integer maskc,maskr,maskl
      logical icel,icer,icec

      CHF_DTERM[ii0 = CHF_ID(k,0);
                ii1 = CHF_ID(k,1);
                ii2 = CHF_ID(k,2)]

      CHF_AUTOMULTIDO[cellBox ; i]

      maskc = mask(CHF_AUTOIX[i])

      icec = ((maskc.eq.GROUNDEDMASKVAL).or.(maskc.eq.FLOATINGMASKVAL))

      if (icec) then
         maskl = mask(CHF_OFFSETIX[i;-ii])
         maskr = mask(CHF_OFFSETIX[i;+ii])
         
         icel = ((maskl.eq.GROUNDEDMASKVAL).or.(maskl.eq.FLOATINGMASKVAL))
         icer = ((maskr.eq.GROUNDEDMASKVAL).or.(maskr.eq.FLOATINGMASKVAL))

         if ( icer .and. (.not.icel)) then
            facevt(CHF_AUTOIX[i]) = facevt(CHF_OFFSETIX[i;+ii])
     &           - factor * thck(CHF_AUTOIX[i])
     &           * (usrf(CHF_OFFSETIX[i;+ii]) -   usrf(CHF_AUTOIX[i]))
         end if

         if ( icel .and. (.not.icer)) then
            facevt(CHF_OFFSETIX[i;+ii]) = facevt(CHF_AUTOIX[i]) 
     &           + factor * thck(CHF_AUTOIX[i])
     &           * (usrf(CHF_AUTOIX[i])-usrf(CHF_OFFSETIX[i;-ii]))
         end if

      end if

      CHF_ENDDO

      return
      end

c------------------------------------------------------
c extrapolate face centered uf to the margin. assumes it
c already contains a face averaged value. 
c When an extrapolation is carried out, reduce the flux
c between cells i, i + 1 by a factor f 
c f = 0 for ursf(i) < topg(i+1) [e.g, tall walls ]
c f = ursf(i)-topg(i+1) / thk(i) for ursf(i)-topg(i+1) < thk(i) 
c f = 1 for ursf(i) - topg(i+1) > thk [the 'usual' case]
c------------------------------------------------------

      subroutine extraptomargin(CHF_FRA1[uf], CHF_FRA1[vface],
     &     CHF_CONST_FRA1[ufin],
     &     CHF_CONST_FRA1[uc],
     &     CHF_CONST_FRA1[usrf],
     &     CHF_CONST_FRA1[topg],
     &     CHF_CONST_FRA1[thk],
     &     CHF_CONST_INT[dir],
     &     CHF_BOX[facebox])

      REAL_T f,hl,hr
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      logical icel,icer
    
      CHF_DTERM[ii0 = CHF_ID(dir,0);
                ii1 = CHF_ID(dir,1);
                ii2 = CHF_ID(dir,2)]

      CHF_AUTOMULTIDO[facebox ; i]

    
      hl = thk(CHF_OFFSETIX[i;-ii])
      hr = thk(CHF_AUTOIX[i])
      
  
      icel = (hl.gt.tiny_thickness) 
      icer = (hr.gt.tiny_thickness)

      vface(CHF_AUTOIX[i]) = one
      uf(CHF_AUTOIX[i]) = ufin(CHF_AUTOIX[i])
      if (icel.and.(.not.icer)) then
!     ice on the left and not on the right
         uf(CHF_AUTOIX[i]) = max(two * uc(CHF_OFFSETIX[i;-ii])
     &           - ufin(CHF_OFFSETIX[i;-ii]), ufin(CHF_AUTOIX[i]))
         vface(CHF_AUTOIX[i]) = one/hl * max(zero,  
     &        usrf(CHF_OFFSETIX[i;-ii]) -  topg(CHF_AUTOIX[i]))
      else if (icer.and.(.not.icel)) then
!     ice on the right and not on the left
         uf(CHF_AUTOIX[i]) = min(two * uc(CHF_AUTOIX[i])
     &        - ufin(CHF_OFFSETIX[i;+ii]),ufin(CHF_AUTOIX[i]))
         vface(CHF_AUTOIX[i]) = one/hr * max(zero,  
     &        usrf(CHF_AUTOIX[i]) -  topg(CHF_OFFSETIX[i;-ii]))

      end if

      if (vface(CHF_AUTOIX[i]) .lt. one ) then
         uf(CHF_AUTOIX[i]) =  uf(CHF_AUTOIX[i]) * vface(CHF_AUTOIX[i])
      end if

      CHF_ENDDO
      return
      end


c ----------------------------------------------------
c switch to using one-sided stresses near grounding line
c ----------------------------------------------------
      subroutine GLCORRECTION(CHF_FRA1[rhs],
     &                        CHF_CONST_FRA1[H],
     &                        CHF_CONST_FRA1[Zsurf],
     &                        CHF_CONST_FIA1[mask],
     &                        CHF_INT[dir],
     &                        CHF_CONST_REAL[dx],
     &                        CHF_CONST_REAL[rhog],
     &                        CHF_BOX[gridBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]

      integer lmask,cmask,rmask
      integer LI,SH,OS,OL
      REAL_T halfOnDx, sl,sr,sc,hl,hr,hc,tmprhs 

      SH = FLOATINGMASKVAL
      LI = GROUNDEDMASKVAL
      OS = OPENSEAMASKVAL
      OL = OPENLANDMASKVAL
      
      halfOnDx = half/dx * rhog


      CHF_DTERM[ii0 = CHF_ID(dir,0);
                ii1 = CHF_ID(dir,1);
                ii2 = CHF_ID(dir,2)]

      CHF_AUTOMULTIDO[gridBox; i]

      cmask = mask(CHF_AUTOIX[i]) 
      rmask = mask(CHF_OFFSETIX[i;+ii])
      lmask = mask(CHF_OFFSETIX[i;-ii])

      sc = zSurf(CHF_AUTOIX[i])
      sl = zSurf(CHF_OFFSETIX[i;-ii])
      sr = zSurf(CHF_OFFSETIX[i;+ii])
      
      hc = H(CHF_AUTOIX[i])
      hl = H(CHF_OFFSETIX[i;-ii])
      hr = H(CHF_OFFSETIX[i;+ii])

      if (cmask.eq.SH) then
        
         if (lmask.eq.LI) then
            if ( (rmask.eq.SH).or.(rmask.eq.OS) ) then
c     LI | SH (this cell) | SH or OS
               tmprhs =  halfOnDx * (sr-sc) * (hr+hc)
c               if ( (tmprhs.lt.zero)) then
c .and. 
c     &              (tmprhs.gt.rhs(CHF_AUTOIX[i]) ) ) then
                  rhs(CHF_AUTOIX[i]) = tmprhs
c               end if
            else
c     LI | SH (this cell) | LI (a bad place to be)
               rhs(CHF_AUTOIX[i]) = zero
            end if
         else if  (rmask.eq.LI) then
            if ( (lmask.eq.SH).or.(lmask.eq.OS) ) then
c     SH or OS | SH (this cell) | LI
               tmprhs =   halfOnDx * (sc-sl) * (hc+hl)
c               if ( (tmprhs.gt.zero) .and. 
c     &              (tmprhs.lt. rhs(CHF_AUTOIX[i]) ) ) then
                  rhs(CHF_AUTOIX[i]) = tmprhs
c               end if
            else
c     LI | SH (this cell) | LI (a bad place to be)
               rhs(CHF_AUTOIX[i]) = zero
            endif
         !else if ((lmask.eq.SH).and.(rmask.eq.OL)) then
c     SH | SH | OL
            !rhs(CHF_AUTOIX[i]) = zero
         !else if ((rmask.eq.SH).and.(lmask.eq.OL)) then
c     OL | SH | SH
          !  rhs(CHF_AUTOIX[i]) = zero
            
         !else if ((lmask.ne.SH).and.(rmask.ne.SH)) then
c     no ice | SH (this cell) | no ice (don't tinker)
            !rhs(CHF_AUTOIX[i]) = zero
          !  rhs(CHF_AUTOIX[i]) = rhs(CHF_AUTOIX[i])
         end if

      else if (cmask.eq.LI) then
         if (lmask.eq.SH) then
            if (rmask.eq.LI) then
c     SH | LI (this cell) | LI
               tmprhs =  halfOnDx * (sr-sc) * (hr+hc)
               if ( (tmprhs.gt.zero) .and. 
     &              (tmprhs.gt.rhs(CHF_AUTOIX[i]))) then
                  rhs(CHF_AUTOIX[i]) = tmprhs
               end if
            else
c     SH | LI (this cell) | not LI (don't tinker)
               rhs(CHF_AUTOIX[i]) = rhs(CHF_AUTOIX[i])
            end if
         else if  (rmask.eq.SH) then
            if (lmask.eq.LI) then
c     LI | LI (this cell) | SH
               tmprhs =  halfOnDx * (sc-sl) * (hc+hl)
               if ( (tmprhs.lt.zero) .and. 
     &              (tmprhs.lt.rhs(CHF_AUTOIX[i])))  then
                  rhs(CHF_AUTOIX[i]) = tmprhs
               end if
            else
c     not LI | LI (this cell) | SH (don't tinker)
               rhs(CHF_AUTOIX[i]) = rhs(CHF_AUTOIX[i])
            endif
         end if

      end if
c$$$      else if (cmask.eq.LI) then
c$$$           
c$$$         if (lmask.eq.SH) then
c$$$            if (rmask.eq.LI) then
c$$$c     SH | LI (this cell) | LI
c$$$               rhs(CHF_AUTOIX[i]) = halfOnDx
c$$$     &              * (sr-sc) * (hr+hc)
c$$$            else
c$$$c     SH | LI (this cell) | not LI (don't tinker)
c$$$               rhs(CHF_AUTOIX[i]) = rhs(CHF_AUTOIX[i])
c$$$            end if
c$$$         else if  (rmask.eq.SH) then
c$$$            if (lmask.eq.LI) then
c$$$c     LI | LI (this cell) | SH
c$$$               rhs(CHF_AUTOIX[i]) = halfOnDx
c$$$     &              * (sc-sl) * (hc+hl)
c$$$            else
c$$$c     not LI | LI (this cell) | SH (don't tinker)
c$$$               rhs(CHF_AUTOIX[i]) = rhs(CHF_AUTOIX[i])
c$$$            endif
c$$$         end if
c$$$
c$$$     end if

      CHF_ENDDO
      return
      end
      
c------------------------------------------------------
c compute the thickness diffusion coefficient D = rgH^2/C
c at cell faces in grounded regions, given cell centred C and H
c------------------------------------------------------

      subroutine SETTHICKDIFF(CHF_FRA1[D],
     &     CHF_CONST_FRA1[C],
     &     CHF_CONST_FRA1[H],
     &     CHF_CONST_FIA1[mask],
     &     CHF_CONST_REAL[rg],
     &     CHF_CONST_INT[dir],
     &     CHF_BOX[faceBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      REAL_T oneOnD

      CHF_DTERM[ii0 = CHF_ID(dir,0);
                ii1 = CHF_ID(dir,1);
                ii2 = CHF_ID(dir,2)]

      CHF_AUTOMULTIDO[faceBox; i]

c      if ( GROUNDEDMASKVAL .eq. 
c     &     iand(mask(CHF_AUTOIX[i]) , mask(CHF_OFFSETIX[i;-ii]))) then

      if ( (mask(CHF_AUTOIX[i]).eq.GROUNDEDMASKVAL) .or.
     &     (mask(CHF_OFFSETIX[i;-ii]).eq.GROUNDEDMASKVAL) ) then

      oneOnD = 0.5 * ( C(CHF_AUTOIX[i]) / H(CHF_AUTOIX[i])**2
     &     + C (CHF_OFFSETIX[i;-ii]) / H (CHF_OFFSETIX[i;-ii])**2)
      
c      if (oneOnD.gt.TINY_NORM) then
         D(CHF_AUTOIX[i]) = rg / oneOnD
      else
         D(CHF_AUTOIX[i]) = 0.0;
      end if

      CHF_ENDDO

      return 
      end 


c------------------------------------------------------
c subtract -D/H grad(d) from faceVel
c------------------------------------------------------
      subroutine SUBTRACTDVEL(CHF_FRA1[faceVel],
     &     CHF_CONST_FRA1[cellH],
     &     CHF_CONST_FRA1[faceH],
     &     CHF_CONST_FRA1[faceD],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_REAL[dx],
     &     CHF_BOX[faceBox]);
      
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      REAL_T oneOnDX

      OneOnDx = one/dx;
      CHF_DTERM[ii0 = CHF_ID(dir,0);
                ii1 = CHF_ID(dir,1);
                ii2 = CHF_ID(dir,2)]

      CHF_AUTOMULTIDO[faceBox; i]
      faceVel(CHF_AUTOIX[i]) = faceVel(CHF_AUTOIX[i])
     &     + faceD(CHF_AUTOIX[i])/faceH(CHF_AUTOIX[i])
     &     * OneOnDx 
     &     * (  - cellH(CHF_OFFSETIX[i;-ii]) + cellH(CHF_AUTOIX[i]))

      CHF_ENDDO
      return 
      end

c------------------------------------------------------
c subtract -D grad(d) from faceFlux
c------------------------------------------------------
      subroutine SUBTRACTDFLUX(CHF_FRA1[faceFlux],
     &     CHF_CONST_FRA1[cellH],
     &     CHF_CONST_FRA1[faceD],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_REAL[dx],
     &     CHF_BOX[faceBox]);
      
      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      REAL_T oneOnDx

      OneOnDx = one/dx;
      CHF_DTERM[ii0 = CHF_ID(dir,0);
                ii1 = CHF_ID(dir,1);
                ii2 = CHF_ID(dir,2)]

      CHF_AUTOMULTIDO[faceBox; i]
      faceFlux(CHF_AUTOIX[i]) = faceFlux(CHF_AUTOIX[i])
     &     + faceD(CHF_AUTOIX[i]) * OneOnDx 
     &     * ( - cellH(CHF_OFFSETIX[i;-ii]) + cellH(CHF_AUTOIX[i]))

      
c      faceFlux(CHF_AUTOIX[i]) = 0.0;
      CHF_ENDDO
      return 
      end


c ------------------------------------------------------------
c  sets initial guess for velocity field to -rhs/beta if beta isn't zero
c  (set initial guess to zero if beta == 0)
c INPUTS/OUTPUTS:
c  vel <=
c  rhs  =>
c beta  =>
c  box  =>
c ------------------------------------------------------------      
      subroutine VELINITIALGUESS(CHF_FRA[vel],
     &                           CHF_FRA[rhs],
     &                           CHF_FRA1[beta],
     &                           CHF_BOX[box])

      integer CHF_AUTODECL[i]

      CHF_AUTOMULTIDO[box; i]
        if (beta(CHF_AUTOIX[i]) .gt. 0.001) then
c  note that this should work in 2d and 3d...
           vel(CHF_AUTOIX[i],0) = -rhs(CHF_AUTOIX[i],0)/beta(CHF_AUTOIX[i])
           vel(CHF_AUTOIX[i],1) = -rhs(CHF_AUTOIX[i],1)/beta(CHF_AUTOIX[i])
        else
c  probably can come up with something better here...
           vel(CHF_AUTOIX[i],0) = zero
           vel(CHF_AUTOIX[i],1) = zero
        endif
      CHF_ENDDO

      return
      end


c ---------------------------------------------------------------
c compute cross layer fluxes f = u phi between FABS phiD and phiU
c by simple upwinding (assuming that positive u means flow from PhiU to phiD) 
c ---------------------------------------------------------------
      subroutine UPWINDLAYERFLUX( CHF_FRA1[f],
     &     CHF_CONST_FRA1[phiD], CHF_CONST_FRA1[phiU],
     &     CHF_CONST_FRA1[u],  CHF_BOX[box])

      integer CHF_AUTODECL[i]
      CHF_AUTOMULTIDO[box; i]

      if (u(CHF_AUTOIX[i]) . ge. zero) then
         f(CHF_AUTOIX[i]) = u(CHF_AUTOIX[i]) * phiD(CHF_AUTOIX[i]);
      else
         f(CHF_AUTOIX[i]) = u(CHF_AUTOIX[i]) * phiU(CHF_AUTOIX[i]);
      end if
      
      CHF_ENDDO
      return
      end

c ------------------------------------------------------------
c calculate a corrected FAB  
c fs = \min(fmax, f + scale * p)
c -----------------------------------------------------------

      subroutine FABMINPLUS(CHF_FRA1[fs],
     &     CHF_CONST_FRA1[f], 
     &     CHF_CONST_FRA1[p], 
     &     CHF_CONST_REAL[scale],
     &     CHF_CONST_REAL[fmax],
     &     CHF_BOX[box])

      integer CHF_AUTODECL[i]
      
      CHF_AUTOMULTIDO[box; i]
      fs(CHF_AUTOIX[i]) = 
     &     min(fmax, f(CHF_AUTOIX[i]) + scale * p(CHF_AUTOIX[i]))
      CHF_ENDDO

      return
      end 
      
      subroutine COMPUTEZVEL(CHF_FRA[uz],
     &     CHF_FRA1[uzs],
     &     CHF_CONST_FRA[ux],
     &     CHF_CONST_FRA[uy],
     &     CHF_CONST_FRA[divuhxy],
     &     CHF_CONST_VR[fsig],
     &     CHF_CONST_VR[csig],
     &     CHF_CONST_VR[dsig],
     &     CHF_CONST_FRA1[dsx], 
     &     CHF_CONST_FRA1[dhx],
     &     CHF_CONST_FRA1[dsy], 
     &     CHF_CONST_FRA1[dhy],
     &     CHF_CONST_FRA1[dst], 
     &     CHF_CONST_FRA1[dht],     
     &     CHF_CONST_FRA1[smb],
     &     CHF_CONST_FRA1[bmb],
     &     CHF_CONST_INT[nlay],
     &     CHF_BOX[box])

      Real_T coldivuhxy(0:nlay-1)
      Real_T colux(0:nlay), coluy(0:nlay)
      Real_T coluz(0:nlay)
      integer layer
      integer CHF_AUTODECL[i]



      CHF_AUTOMULTIDO[box; i]
c     this is pretty inefficient, but needed because spatial indices run fastest in FABS 
      do layer = 0, nlay - 1
         coldivuhxy(layer) = divuhxy(CHF_AUTOIX[i], layer)
      end do
      do layer = 0, nlay
         colux(layer) = ux(CHF_AUTOIX[i], layer)
         coluy(layer) = uy(CHF_AUTOIX[i], layer)
      end do

      call column_compute_z_vel(coluz, uzs(CHF_AUTOIX[i]),
     &      colux, coluy, coldivuhxy,  fsig, dsig,
     &     dsx(CHF_AUTOIX[i]), dhx(CHF_AUTOIX[i]), 
     &     dsy(CHF_AUTOIX[i]), dhy(CHF_AUTOIX[i]), 
     &     dst(CHF_AUTOIX[i]), dht(CHF_AUTOIX[i]), 
     &     smb(CHF_AUTOIX[i]), bmb(CHF_AUTOIX[i]))

      do layer = 0, nlay
         uz(CHF_AUTOIX[i], layer) = coluz(layer)
      end do
      CHF_ENDDO

      return
      end 

c -------------------------------------------------------------
c calculation of the vertical (sigma) velocity from div(u) = 0
c plus surface / basal mass balance, surface and thickness gradients
c -------------------------------------------------------------
      subroutine COMPUTESIGMAVEL(
     &     CHF_FRA[usig],
     &     CHF_CONST_FRA[ux],
     &     CHF_CONST_FRA[uy],
     &     CHF_CONST_FRA[divuhxy],
     &     CHF_CONST_VR[dsig],
     &     CHF_CONST_FRA1[dht],     
     &     CHF_CONST_FRA1[smb],
     &     CHF_CONST_FRA1[bmb],
     &     CHF_CONST_INT[nlay],
     &     CHF_BOX[box])

      Real_T coldivuhxy(0:nlay-1)
      Real_T colux(0:nlay), coluy(0:nlay)
      Real_T colusig(0:nlay)
      integer layer
      integer CHF_AUTODECL[i]



      CHF_AUTOMULTIDO[box; i]
c     this is pretty inefficient, but needed because spatial indices run fastest in FABS 
      do layer = 0, nlay - 1
         coldivuhxy(layer) = divuhxy(CHF_AUTOIX[i], layer)
      end do
      do layer = 0, nlay
         colux(layer) = ux(CHF_AUTOIX[i], layer)
         coluy(layer) = uy(CHF_AUTOIX[i], layer)
      end do

      call column_compute_sigma_vel( colusig, colux, coluy, coldivuhxy,
     &     dsig, nlay, dht(CHF_AUTOIX[i]), 
     &     smb(CHF_AUTOIX[i]), bmb(CHF_AUTOIX[i]))

      do layer = 0, nlay
         usig(CHF_AUTOIX[i], layer) = colusig(layer)
      end do
      CHF_ENDDO

      return
      end 




c----------------------------------------------------
c set topg <- topg - dh for grounded ice, so that
c surface remains constant
c----------------------------------------------------

      subroutine evolvegroundedbed(CHF_FRA1[newh],
     &     CHF_FRA1[oldh], 
     &     CHF_FRA1[topg],
     &     CHF_CONST_FIA1[mask],  
     &     CHF_BOX[box])

      
      integer CHF_AUTODECL[i]
      REAL_T dh

      CHF_AUTOMULTIDO[box; i]
      if (mask (CHF_AUTOIX[i]) .eq. GROUNDEDMASKVAL) then
        dh = newh(CHF_AUTOIX[i]) - oldh(CHF_AUTOIX[i])
        topg(CHF_AUTOIX[i]) = topg(CHF_AUTOIX[i]) - dh
      end if
      CHF_ENDDO

      return
      end

      
 
c -------------------------------------------------------------
c compute "area advection" of real-valued ice mask
c Basic idea is that in the absence of calving, etc, a calving front
c will advance at the speed of the ice
c 
c     INPUTS/OUTPUTS:
c  dmask        <=> change to mask accumulated over the timestep
c  mask          => ice mask between 0 (no ice) and 1 (fully-covered)
c  faceVel       => face-centered advection velocity
c  dx            => cell spacing
c  dt            => timestep
c  fillThreshold => value above which we declare a cell to be full 
c                   and set mask to 1.
c  box           => subregion over which to update mask
c  idir          => component direction (do this one direction at a time)
c -------------------------------------------------------------
      subroutine ADVECTMASKA(CHF_FRA1[dmaska],
     &     CHF_CONST_FRA1[mask],
     &     CHF_CONST_FRA1[faceVel],
     &     CHF_REAL[dx],
     &     CHF_REAL[dt],
     &     CHF_REAL[full],
     &     CHF_BOX[box],
     &     CHF_INT[idir])
      

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      REAL_T factor

c  this assumes 2d and dx == dy
      factor = dt/dx
      
      CHF_DTERM[
      ioff0 = CHF_ID(0,idir);
      ioff1 = CHF_ID(1,idir);
      ioff2 = CHF_ID(2,idir)]
      
      CHF_AUTOMULTIDO[box; i]

      
c     lower side
         if ((faceVel(CHF_AUTOIX[i]) .gt. zero)
     &        .and.(mask(CHF_OFFSETIX[i;-ioff]) .gt. full)) then
            dmaska(CHF_AUTOIX[i]) = dmaska(CHF_AUTOIX[i]) 
     &           + factor*faceVel(CHF_AUTOIX[i])
         endif
         
c     upper side
         if ((faceVel(CHF_OFFSETIX[i;+ioff]) .lt. zero)
     &        .and.(mask(CHF_OFFSETIX[i;+ioff]) .gt. full)) then 
            dmaska(CHF_AUTOIX[i]) = dmaska(CHF_AUTOIX[i]) 
     &           - factor*faceVel(CHF_OFFSETIX[i;+ioff]) 
         endif


      CHF_ENDDO
      return
      end

c -------------------------------------------------------------
c Compute "area advection" of real-valued non-ice mask
c Basic idea is that given a calving rate *vector*,
c the front retreats at a known rate. designed to complement
c ADVECTMASKA above. Could be combined with it      
c 
c     INPUTS/OUTPUTS:
c     dmaskc      <=> change to mask due to calving accumlated over the timestep
c     mask       => ice mask between 0 (no ice) and 1 (fully-covered)
c     dmaska     => update to mask due to ice advection  
c  faceVel       => face-centered advection velocity
c  dx            => cell spacing
c  dt            => timestep
c  fillThreshold => value above which we declare a cell to be full 
c                   and set mask to 1.
c  box           => subregion over which to update mask
c  idir          => component direction (do this one direction at a time)
c -------------------------------------------------------------
      subroutine ADVECTMASKC(CHF_FRA1[dmaskc],
     &     CHF_CONST_FRA1[mask],
     &     CHF_CONST_FRA1[dmaska],
     &     CHF_CONST_FRA1[faceVel],
     &     CHF_REAL[dx],
     &     CHF_REAL[dt],
     &     CHF_REAL[empty],
     &     CHF_BOX[box],
     &     CHF_INT[idir])
      

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ioff]
      REAL_T factor
      logical front

c  this assumes 2d and dx == dy
      factor = dt/dx


      CHF_DTERM[
      ioff0 = CHF_ID(0,idir);
      ioff1 = CHF_ID(1,idir);
      ioff2 = CHF_ID(2,idir)]
      
      CHF_AUTOMULTIDO[box; i]

c     outer condition limits calving to cells that contain
c     ice at the start or at the end of the time-step
      if ((mask(CHF_AUTOIX[i]) .gt. empty) .or.
     &     (mask(CHF_AUTOIX[i]) + dmaska(CHF_AUTOIX[i]) .gt. empty))
     &     then
         
c     ocean on the lower side, so that the relevant face velocity
c     is on the upper side (to match advance in ADVECTMASKA)
         if ((faceVel(CHF_OFFSETIX[i;+ioff]) .gt. zero)
     &        .and.(mask(CHF_OFFSETIX[i;-ioff]) .lt. empty)) then
            dmaskc(CHF_AUTOIX[i]) = dmaskc(CHF_AUTOIX[i]) 
     &           - factor*faceVel(CHF_OFFSETIX[i;+ioff])
         endif
         
c     ocean on the upper side, so that the relevant face velocity
c     is on the lower side (to match advance in ADVECTMASKA)  
         if ((faceVel(CHF_AUTOIX[i]) .lt. zero)
     &        .and.(mask(CHF_OFFSETIX[i;+ioff]) .lt. empty)) then 
            dmaskc(CHF_AUTOIX[i]) = dmaskc(CHF_AUTOIX[i]) 
     &           + factor*faceVel(CHF_AUTOIX[i]) 
         endif
      endif
c$$$  c       lower side
c$$$  if ((faceVel(CHF_AUTOIX[i]) .gt. zero)
c$$$  &     .and.(mask(CHF_OFFSETIX[i;-ioff]) .lt. empty)) then
c$$$  dmask(CHF_AUTOIX[i]) = dmask(CHF_AUTOIX[i]) 
c$$$     &        - factor*faceVel(CHF_AUTOIX[i])
c$$$  endif
c$$$  
c$$$  c     upper side
c$$$      if ((faceVel(CHF_OFFSETIX[i;+ioff]) .lt. zero)
c$$$  &     .and.(mask(CHF_OFFSETIX[i;+ioff]) .lt. empty)) then 
c$$$  dmask(CHF_AUTOIX[i]) = dmask(CHF_AUTOIX[i]) 
c$$$     &        + factor*faceVel(CHF_OFFSETIX[i;+ioff]) 
c$$$      endif
c$$$      

      CHF_ENDDO
      return
      end

